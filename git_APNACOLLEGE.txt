/* 

● Version Control System: A tool that allows to track any sort of changes in code. GIT is a VCS.

● Github is a website that allows developers to store and manage their code using Git. Projects in Github are kept as folders(Repository).

● In Github, the latest commit about the file is shown beside the file.

● ~ resembles root directory.

● We can egitxecute terminal commands for softwares that require them from any terminal.

● We clear the terminal with the 'clear' command.

● "your code is upto date" means that the code in GIT is same as Github.

● Any new file created initially stays as untracked.

● Any changes made in tracked files are to be added first and then committed.

● Workflow if Started from Github:

1. Github Repo create.

2. Clone the Repo to GIT.

3. Make changes.

4. add the changes.

5. Commit the changes.

6. Push the changes to Github.

● Worfflow if started from GIT:

1. Create a Github Repo.

2. Initialize GIT in the working directory.

3. Make changes.

4. Add and commit the changes.

5. Add the Github Repo as remote Repo to the GIT Repo present working directory.

6. Push the changes to Github Remote Repo.

● PR in Github === Merge in GIT

● If we are in a branch and want to compare it with other branch file condition, we can do it by:

git diff branch_with_which_compare_current_branch

● We can reset one step back if we accidentally did any GIT operation on files by:

git reset file_name file_name .... (for the named files)
git reset (for all files)

● We can reset n commits back by:

git reset HEAD~n

● We can reset back to a particular commit by:

git reset commit_hash

If we want the changes to reset also then:

git reset --hard commit_hash

● Even if we reset the steps in GIT, the changes in files will stay as they were before resetting just the GIT step resets.

● In a sense we can say that the latest commit in a branch is HEAD(pointer storing the latest commit).

● Fork: It is a rough copy with the same settings and visibility options amde for the forker.

● To restore the cahnges in a file:

git restore --source=commit_hash file_name

which (by default) puts it in working tree. If you want to put the change directly in index so it can be committed straight away:

git restore --source=abcdef --worktree --staged file_name

or with short option names:

git restore -scommit_hash -W -S file_name

● git log -n
Shows the n most recent commits

● git checkout commit_hash -- file.extension
This takes the file back to the state of how it was while commit_hash.

● git revert HEAD~n
Reverts back n commits.

● git revert --hard HEAD~n
Reverts and deletes n commits.

● git log file.extension / git log --oneline file.extension
Shows the commits made for that file only.

● git checkout [commit ID] -- path/to/file

● To uninitialize a GIT Repo be in the GIT Repo and:

rm -rf .git

or delete .git folder inside the Repo.

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

● 

*/